name: iOS Build & Deploy Main

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  
  build-ios:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - flavor: star
            profile_secret: PROV_PRO_APPStore_GNK
          - flavor: moon
            profile_secret: PROV_PRO_APPStore_MOON

    env:
      KEYCHAIN_PASSWORD: "github"
      CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
      IOS_CERT_BASE64: ${{ secrets.IOS_CERT_BASE64 }}
      SECRET_KEY_BASE64: ${{ secrets.SECRET_KEY_BASE64 }}
      BASE_URL_BASE64: ${{ secrets.BASE_URL_BASE64 }}
      APPLE_ID: ${{ secrets.APPLE_ID }}


    steps:
      # 1. Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'
          cache: false   


      - name: Decode and verify certificate
        run: |
            echo "$IOS_CERT_BASE64" | base64 --decode > certificate.p12
            file certificate.p12
            openssl pkcs12 -in certificate.p12 -nokeys -passin pass:"$CERT_PASSWORD"
  
      - name: Install signing
        run: |
            echo "$IOS_CERT_BASE64" | base64 --decode > certificate.p12
            security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
            security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign -A
            security list-keychains -s ~/Library/Keychains/build.keychain
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" ~/Library/Keychains/build.keychain
            rm certificate.p12         
  
      - name: Install provisioning profile (${{ matrix.flavor }})
        run: |
            echo "${{ secrets[matrix.profile_secret] }}" | base64 --decode > "${{ matrix.flavor }}.mobileprovision"
  
            PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< "$(
                security cms -D -i "${{ matrix.flavor }}.mobileprovision"
            )")
            echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
  
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp "${{ matrix.flavor }}.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/
       
      # 3. Setup App Store Connect key
      - name: Setup App Store Connect API Key
        run: |
          flutter clean
          flutter pub get
          cd ios
          pod install --verbose --no-repo-update

          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" > ~/.appstoreconnect/private_keys/AuthKey.p8
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      # 4. Select correct Xcode version
      - name: Setup Xcode
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      # 5. Run your build shell script (calls Fastlane inside)
      - name: Run build script
        run: bash upload_ios_appstostore.sh

      # 6. Show last 50 lines of Fastlane/Xcode log (for quick debugging)
      - name: Show last lines of Fastlane log
        if: failure()
        run: |
          echo "üßæ Showing last 50 lines of Runner-star.log (if available)..."
          tail -n 50 /Users/runner/Library/Logs/gym/Runner-star.log || echo "‚ö†Ô∏è No Fastlane log file found."

      # 7. Upload full logs as artifact (downloadable)
      - name: Upload Xcode/Fastlane Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-fastlane-logs
          path: |
            /Users/runner/Library/Logs/gym/
            ~/Library/Logs/scan/
