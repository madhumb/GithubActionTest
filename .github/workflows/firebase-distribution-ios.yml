name: iOS Release Build - Archive, Sign, Distribute

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - flavor: star
            profile_secret: PROV_PRO_APPStore_GNK
            firebase_app: FIREBASE_APP_ID_STAR
            bundle_id: com.gnkbros.star
            entrypoint: lib/main_star.dart

          - flavor: moon
            profile_secret: PROV_PRO_APPStore_MOON
            firebase_app: FIREBASE_APP_ID_MOON
            bundle_id: com.recode.bookmark
            entrypoint: lib/main_moon.dart
          
    env:
      KEYCHAIN_PASSWORD: "github"
      CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
      IOS_CERT_BASE64: ${{ secrets.IOS_CERT_BASE64 }}
      SECRET_KEY_BASE64: ${{ secrets.SECRET_KEY_BASE64 }}
      BASE_URL_BASE64: ${{ secrets.BASE_URL_BASE64 }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      FLUTTER_ROOT: /Users/runner/hostedtoolcache/flutter/stable-3.24.5-arm64
      PUB_CACHE: /Users/runner/.pub-cache


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'
          cache: false

      - name: Cache Flutter
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ${{ env.FLUTTER_ROOT }}
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-deriveddata-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deriveddata-

      - name: Flutter pub get
        run: flutter pub get

      - name: Decode and verify certificate
        run: |
          echo "$IOS_CERT_BASE64" | base64 --decode > certificate.p12
          file certificate.p12
          openssl pkcs12 -in certificate.p12 -nokeys -passin pass:"$CERT_PASSWORD"

      - name: Install signing
        run: |
          echo "$IOS_CERT_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign -A
          security list-keychains -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" ~/Library/Keychains/build.keychain
          rm certificate.p12
          security find-identity -v -p codesigning
         

      - name: Ensure provisioning profile matches flavor
        run: |
            # Decode the provisioning profile for the current flavor
            echo "${{ secrets[matrix.profile_secret] }}" | base64 --decode > "${{ matrix.flavor }}.mobileprovision"
        
            # Copy to system profiles folder
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp "${{ matrix.flavor }}.mobileprovision" ~/Library/MobileDevice/Provisioning\ Profiles/
        
            # Extract UUID from profile
            PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< "$(
              security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/${{ matrix.flavor }}.mobileprovision
            )")
            echo "Profile UUID: $PROFILE_UUID"
            echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
        
            # Extract App ID from profile
            APP_ID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin <<< "$(
              security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/${{ matrix.flavor }}.mobileprovision
            )")
            echo "App ID in profile: $APP_ID"
            echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          
        

      - name: Install CocoaPods
        run: |
          flutter clean
          flutter pub get
          cd ios
          pod install --repo-update
          cd ..


      - name: list Profiles
        run: |
          ls -lh ~/Library/MobileDevice/Provisioning\ Profiles/
      # - name: Setup .env file
      #   run: |
      #     cat <<EOF > .env
      #     SECRET_KEY="$(echo $SECRET_KEY_BASE64 | base64 --decode | tr -d '\r')"
      #     BASE_URL="$(echo $BASE_URL_BASE64 | base64 --decode | tr -d '\r')"
      #     EOF
      #     echo "" >> .env
      #     flutter pub run build_runner build --delete-conflicting-outputs
      - name: Setup .env file
        run: |
          cat <<EOF > .env
          SECRET_KEY="$(echo $SECRET_KEY_BASE64 | base64 --decode | tr -d '\r')"
          BASE_URL="$(echo $BASE_URL_BASE64 | base64 --decode | tr -d '\r')"
          EOF
          # |
          # echo "SECRET_KEY=$(echo $SECRET_KEY_BASE64 | base64 --decode)" >> .env
          # echo "BASE_URL=$(echo $BASE_URL_BASE64 | base64 --decode)" >> .env
          echo "" >> .env
          file .env
          flutter pub run build_runner build --delete-conflicting-outputs    
          
      
      - name: Build iOS (no codesign)
        run: |
           flutter build ipa \
            --release \
            --flavor ${{ matrix.flavor }} \
            -t lib/main_${{ matrix.flavor }}.dart \
            --export-options-plist=ios/ExportOptions_${{ matrix.flavor }}.plist

              
              echo "XCARCHIVE_PATH=build/ios/archive/Runner.xcarchive" >> $GITHUB_ENV
              ls -lh build/ios/archive

             
      - name: code sign manually
        run: |       
         CODESIGN_IDENTITY=$(security find-identity -v -p codesigning | grep "iPhone Distribution" | awk -F'"' '{print $2}' | head -n 1)

         codesign -f -s "$CODESIGN_IDENTITY" \
          --entitlements ios/Runner/Runner.entitlements \
          build/ios/archive/Runner.xcarchive/Products/Applications/Runner.app
    
      - name: Export IPA (manual signing)
        run: |
                FLAVOR=${{ matrix.flavor }}
                IPA_DIR=build/ios/ipa
                mkdir -p $IPA_DIR
            
                # Generate ExportOptions.plist dynamically
                cat <<EOF > ios/ExportOptions_${FLAVOR}.plist
                <?xml version="1.0" encoding="UTF-8"?>
                <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
                <plist version="1.0">
                <dict>
                    <key>method</key>
                    <string>app-store-connect</string>
                    <key>signingStyle</key>
                    <string>manual</string>
                    <key>teamID</key>
                    <string>ZCEY7L7MT7</string>
                    <key>provisioningProfiles</key>
                    <dict>
                        <key>${{ matrix.bundle_id }}</key>
                        <string>$PROFILE_UUID</string>
                    </dict>
                </dict>
                </plist>
                EOF
            
                echo "ExportOptions plist for $FLAVOR created."
            
                # Export IPA
                xcodebuild -exportArchive \
                  -archivePath $XCARCHIVE_PATH \
                  -exportPath $IPA_DIR DEVELOPMENT_TEAM="ZCEY7L7MT7" \
                  -exportOptionsPlist ios/ExportOptions_${FLAVOR}.plist \
                  -verbose
            
                # Rename IPA so it includes flavor
                mv $IPA_DIR/Runner.ipa $IPA_DIR/Runner-${FLAVOR}.ipa
                echo "IPA_PATH=$IPA_DIR/Runner-${FLAVOR}.ipa" >> $GITHUB_ENV
                echo "âœ… IPA for $FLAVOR exported: $IPA_DIR/Runner-${FLAVOR}.ipa"

                
      # - name: Export IPA with Xcode
      #   run: |
      #     mkdir -p build/ios/ipa
      #     xcodebuild -exportArchive \
      #     -archivePath $XCARCHIVE_PATH \
      #     -exportPath build/ios/ipa \
      #     -exportOptionsPlist ExportOptions_${{ matrix.flavor }}.plist
      #     mv build/ios/ipa/Runner.ipa build/ios/ipa/Runner-${{ matrix.flavor }}.ipa
      #     echo "IPA_PATH=build/ios/ipa/Runner-${{ matrix.flavor }}.ipa" >> $GITHUB_ENV

    
                  

      - name: Upload xcarchive (${{ matrix.flavor }})
        uses: actions/upload-artifact@v4
        with:
          name: iOS-xcarchive-${{ matrix.flavor }}
          path: build/ios/archive/Runner.xcarchive

      - name: Upload IPA (${{ matrix.flavor }})
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ matrix.flavor }}
          path: build/ios/ipa/*.ipa

      - name: Distribute to Firebase App Distribution (${{ matrix.flavor }})
        run: |
          IPA_PATH=$(ls build/ios/ipa/*.ipa | head -n 1)
          firebase appdistribution:distribute "$IPA_PATH" \
            --app ${{ secrets[matrix.firebase_app] }} \
            --token ${{ secrets.FIREBASE_TOKEN }} \
            --groups "qa-testers"
