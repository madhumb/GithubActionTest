name: Build iOS IPA

on:
  workflow_dispatch:
  push:
   branches:
     - main   # runs on push to main branch

jobs:
  build-ios:
    runs-on: macos-latest
    env:
        KEYCHAIN_PASSWORD: "github"       # arbitrary, only for CI keychain
        CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}   # your .p12 export password
        IOS_CERT_BASE64: ${{ secrets.IOS_CERT_BASE64 }}
        PROV_PRO_APPStore_GNK: ${{ secrets.PROV_PRO_APPStore_GNK }}
        SECRET_KEY_BASE64: ${{ secrets.SECRET_KEY_BASE64 }}
        BASE_URL_BASE64: ${{ secrets.BASE_URL_BASE64 }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.5'
          cache: true # set your Flutter version

      # Install dependencies
      - name: Flutter pub get
        run: |
         sudo gem install fastlane -NV
         flutter clean
         rm -rf ios/Pods ios/Podfile.lock
         flutter pub get

         sudo gem install cocoapods
         pod repo update
         cd ios
         pod install --verbose
         

      - name: Decode and verify certificate
        run: |
          echo "$IOS_CERT_BASE64" | base64 --decode > certificate.p12
          file certificate.p12
          openssl pkcs12 -in certificate.p12 -nokeys -passin pass:"$CERT_PASSWORD"

      # Decode and install signing certificate
      - name: Install signing 
        run: |
          echo "$IOS_CERT_BASE64" | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign -A
          security list-keychains -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" ~/Library/Keychains/build.keychain
          rm certificate.p12

      # - name: Debug Secret
      #   run: |
      #    if [ -z "$PROV_PRO_APPStore_GNK" ]; then
      #      echo "❌ Secret is empty or not passed to env."
      #     else
      #      echo "✅ Secret length: ${#PROV_PRO_APPStore_GNK}"
      #     fi
       

      # Install provisioning profile
      - name: Install provisioning profile
        run: |
        
         echo "$PROV_PRO_APPStore_GNK" | base64 --decode > com.gnkbros.app.mobileprovision         
         PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< "$(security cms -D -i com.gnkbros.app.mobileprovision)")

         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
         cp com.gnkbros.app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

         security cms -D -i com.gnkbros.app.mobileprovision > profile.plist
         /usr/libexec/PlistBuddy -c "Print :UUID" profile.plist
      
     
      - name: Setup .env file
        run: |
          cat <<EOF > .env
          SECRET_KEY="$(echo $SECRET_KEY_BASE64 | base64 --decode | tr -d '\r')"
          BASE_URL="$(echo $BASE_URL_BASE64 | base64 --decode | tr -d '\r')"
          EOF
          # |
          # echo "SECRET_KEY=$(echo $SECRET_KEY_BASE64 | base64 --decode)" >> .env
          # echo "BASE_URL=$(echo $BASE_URL_BASE64 | base64 --decode)" >> .env
          echo "" >> .env
          file .env
          flutter pub run build_runner build --delete-conflicting-outputs


      # - name: flutter pub run build_runner build --delete-conflicting-outputs
      #   run: |
      #     flutter pub run build_runner build --delete-conflicting-outputs

  
      - name: Generate env.g.dart with Envied
        run: | 
          dart run build_runner build --delete-conflicting-outputs

      # - name: create Exportplist file
      #   run: |
      #     cat > ExportOptions.plist <<EOF
      #     <?xml version="1.0" encoding="UTF-8"?>
      #     <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      #     <plist version="1.0">
      #     <dict>
      #       <key>method</key><string>app-store-connect</string>
      #       <key>uploadBitcode</key>
      #       <true/>
      #       <key>compileBitcode</key>
      #       <true/>
      #       <key>signingStyle</key><string>manual</string>
      #       <key>teamID</key><string>ZCEY7L7MT7</string>
      #       <key>provisioningProfiles</key>
      #       <dict>
      #         <key>com.gnkbros.app</key><string>com.gnkbros.app appstore</string>
      #       </dict>
      #     </dict>
      #     </plist>
      #     EOF
    
          
      - name: Build Flutter iOS
        run: |
          flutter build ipa --flavor star -t lib/main_star.dart --release -v --export-options-plist ExportOptions.plist

      # - name: Export IPA
      #   run: |
      #       xcodebuild -exportArchive \
      #       -archivePath build/ios/archive/Runner.xcarchive \
      #       -exportOptionsPlist ExportOptions.plist \
      #       -exportPath build/
            
      - name: upload from fastlane
        run: |
            fastlane pilot upload \
                --ipa sep-roject/build/ios/ipa/Runner.ipa \
                --apple_id "$APPLE_ID" \
                --skip_waiting_for_build_processing true        
      
      # - name: Run fastlane
      #   run: fastlane ios beta flavor:star bundle_id:com.gnkbros.app     
        
      # Archive the app with Xcode
      # - name: Archive app Automatic
      #   run: |
      #     xcodebuild -workspace ios/Runner.xcworkspace \
      #       -scheme "star" \
      #       -configuration "star Release" \
      #       -archivePath build/Runner.xcarchive \
      #       archive DEVELOPMENT_TEAM=ZCEY7L7MT7 \
      #       CODE_SIGN_STYLE=Automatic \
      #       -destination 'generic/platform=iOS' \

      # - name: Archive app manual
      #   run: |
      #     echo 'PROFILE_UUID $PROFILE_UUID'
      #     xcodebuild -workspace ios/Runner.xcworkspace \
      #       -scheme "star" \
      #       -configuration "star Release" \
      #       -archivePath build/Runner.xcarchive \
      #       archive DEVELOPMENT_TEAM=ZCEY7L7MT7 \
      #       CODE_SIGN_STYLE=Manual \
      #       -destination 'generic/platform=iOS' \
      #       PROVISIONING_PROFILE_SPECIFIER=$PROFILE_UUID \
      #       PRODUCT_BUNDLE_IDENTIFIER=com.gnkbros.app -allowProvisioningUpdates

      # Export IPA
     

      # # Upload artifact (IPA)
      # - name: Upload IPA
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: iOS-IPA
      #     path: build/*.ipa
