name: iOS Release Build - create Archive - sign manually

on:
  workflow_dispatch: # manually trigger
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest
    env:
        KEYCHAIN_PASSWORD: "github"       # arbitrary, only for CI keychain
        CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}   # your .p12 export password
        IOS_CERT_BASE64: ${{ secrets.IOS_CERT_BASE64 }}
        PROV_PRO_APPStore_GNK: ${{ secrets.PROV_PRO_APPStore_GNK }}
        SECRET_KEY_BASE64: ${{ secrets.SECRET_KEY_BASE64 }}
        BASE_URL_BASE64: ${{ secrets.BASE_URL_BASE64 }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        # FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}


    steps:
      # Checkout source
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5' # set your Flutter version
          channel: 'stable'
          cache: false # set your Flutter version


     # Cache Flutter SDK & pub packages
      - name: Cache Flutter
        uses: actions/cache@v4
        with:
            path: |
                ~/.pub-cache
                ${{ env.FLUTTER_ROOT }}
            key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.lock') }}
            restore-keys: |
                ${{ runner.os }}-flutter-

    # Cache CocoaPods
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
            path: ios/Pods
            key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
            restore-keys: |
                ${{ runner.os }}-pods-

   # Cache DerivedData
      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
            path: ~/Library/Developer/Xcode/DerivedData
            key: ${{ runner.os }}-deriveddata-${{ github.sha }}
            restore-keys: |
                ${{ runner.os }}-deriveddata-


      # Install dependencies
      - name: Flutter pub get
        run: flutter pub get

      - name: Cache CocoaPods
        uses: actions/cache@v3 
        with:
            path: ios/Pods
            key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
            restore-keys: |
              ${{ runner.os }}-pods-  


      - name: Decode and verify certificate
        run: |
            echo "$IOS_CERT_BASE64" | base64 --decode > certificate.p12
            file certificate.p12
            openssl pkcs12 -in certificate.p12 -nokeys -passin pass:"$CERT_PASSWORD"
      
    # Decode and install signing certificate
      - name: Install signing 
        run: |
            echo "$IOS_CERT_BASE64" | base64 --decode > certificate.p12
            security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
            security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign -A
            security list-keychains -s ~/Library/Keychains/build.keychain
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" ~/Library/Keychains/build.keychain
            rm certificate.p12         
      
     # Install provisioning profile
      - name: Install provisioning profile
        run: |
     
            echo "$PROV_PRO_APPStore_GNK" | base64 --decode > com.gnkbros.app.mobileprovision         
            
            PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< "$(
                security cms -D -i com.gnkbros.app.mobileprovision
            )")
            echo "Profile UUID: $PROFILE_UUID"

            NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<< "$(security cms -D -i com.gnkbros.app.mobileprovision)")
            BUNDLE=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin <<< "$(security cms -D -i com.gnkbros.app.mobileprovision)")

            echo PROFILE_UUID
            echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp com.gnkbros.app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

            security cms -D -i com.gnkbros.app.mobileprovision > profile.plist
            /usr/libexec/PlistBuddy -c "Print :UUID" profile.plist

            echo "BUNDLE=$BUNDLE" >> $GITHUB_ENV
      
      

    # Decode certificate and provisioning profile
    

    #   - name: Set up signing
    #     run: |
    #       # Create keychain
    #       security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
    #       security set-keychain-settings -lut 21600 build.keychain
    #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

    #       # Decode certificate
    #       echo "$IOS_CERT_BASE64" | base64 --decode > cert.p12
    #       security import cert.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign

    #       # Allow codesign to use the keychain
    #       security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

    #       # Decode provisioning profile
    #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
    #       echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/com.gnkbros.app_AppStore.mobileprovision

      # iOS dependencies
      - name: Install CocoaPods
        run: |
          flutter clean
          flutter pub get
          cd ios
          pod install --repo-update

      
      - name: Debug provisioning profile
        run: |
            echo "Listing installed profiles..."
            ls -lh ~/Library/MobileDevice/Provisioning\ Profiles
            
            PROFILE=$(ls ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -n 1)
            echo "Using profile: $PROFILE"
        
            echo "Profile Name:"
            /usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<< "$(security cms -D -i "$PROFILE")"
        
            echo "Profile UUID:"
            /usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< "$(security cms -D -i "$PROFILE")"
        
            echo "Team Identifier:"
            /usr/libexec/PlistBuddy -c "Print :Entitlements:com.apple.developer.team-identifier" /dev/stdin <<< "$(security cms -D -i "$PROFILE")" || echo "No team ID field"
        
            echo "Application Identifier:"
            /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin <<< "$(security cms -D -i "$PROFILE")"
        
            echo "Bundle ID Entitlement:"
            /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin <<< "$(security cms -D -i "$PROFILE")" | cut -d'.' -f2-
                
  
      - name: Setup .env file
        run: |
            cat <<EOF > .env
            SECRET_KEY="$(echo $SECRET_KEY_BASE64 | base64 --decode | tr -d '\r')"
            BASE_URL="$(echo $BASE_URL_BASE64 | base64 --decode | tr -d '\r')"
            EOF
            # |
            # echo "SECRET_KEY=$(echo $SECRET_KEY_BASE64 | base64 --decode)" >> .env
            # echo "BASE_URL=$(echo $BASE_URL_BASE64 | base64 --decode)" >> .env
            echo "" >> .env
            file .env
            flutter pub run build_runner build --delete-conflicting-outputs
 
       # Build IPA
      - name: Build iOS IPA
        run: |
          flutter build ipa \
            --release --flavor star \
            -t lib/main_star.dart --no-codesign \
            --export-options-plist=ExportOptions.plist

     
      - name: Upload xcarchive
        uses: actions/upload-artifact@v4
        with:
              name: iOS-xcarchive
              path: build/ios/archive/Runner.xcarchive

     
            # Upload IPA as artifact (optional)
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios/ipa/*.ipa
